package kr.nomad.mars.dao;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;


import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import kr.nomad.mars.dto.BbsComment;
public class MissionCommentDao {
	
	private JdbcTemplate jdbcTemplate;
	public void setDataSource(DataSource dataSource) {
	    this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	private RowMapper bbscommentMapper = new RowMapper() {
		public BbsComment mapRow(ResultSet rs, int rowNum) throws SQLException {
			BbsComment bbscomment = new BbsComment();
			bbscomment.setBbsCommentSeq(rs.getInt("bbs_comment_seq "));
			bbscomment.setBbsSeq(rs.getInt("bbs_seq"));
			bbscomment.setBbsCategory(rs.getString("bbs_category"));
			bbscomment.setBbsHeader(rs.getString("bbs_header"));
			bbscomment.setUserId(rs.getString("user_id"));
			bbscomment.setBbsTitle(rs.getString("bbs_title"));
			bbscomment.setBbsContents(rs.getString("bbs_contents"));
			bbscomment.setFiles(rs.getString("files"));
			bbscomment.setLinkUrl(rs.getString("link_url"));
			bbscomment.setExtraContents(rs.getString("extra_contents"));
			bbscomment.setViewCount(rs.getInt("view_count"));
			bbscomment.setLikeCount(rs.getInt("like_count"));
			bbscomment.setDislikeCount(rs.getInt("dislike_count"));
			bbscomment.setReportCount(rs.getInt("report_count"));
			bbscomment.setFileCount(rs.getInt("file_count"));
			bbscomment.setCommentCount(rs.getInt("comment_count"));
			bbscomment.setRegDate(rs.getString("reg_date"));
			bbscomment.setRLevel(rs.getInt("r_level"));
			bbscomment.setRCommentSeq(rs.getInt("r_comment_seq"));
			bbscomment.setRRegDate(rs.getString("r_reg_date"));
			return bbscomment;
		}
	};

	public void addBbsComment(final BbsComment bbscomment) {
		String query = "" +
				"INSERT INTO T_NF_MISSION_COMMENT " +
				"	(bbs_comment_seq , bbs_seq, bbs_category, bbs_header, user_id, bbs_title, bbs_contents, files, link_url, extra_contents, view_count, like_count, dislike_count, report_count, file_count, comment_count, reg_date, r_level, r_comment_seq, r_reg_date) " +
				"VALUES " +
				"	(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
		this.jdbcTemplate.update(query, new Object[] {
			bbscomment.getBbsCommentSeq(),
			bbscomment.getBbsSeq(),
			bbscomment.getBbsCategory(),
			bbscomment.getBbsHeader(),
			bbscomment.getUserId(),
			bbscomment.getBbsTitle(),
			bbscomment.getBbsContents(),
			bbscomment.getFiles(),
			bbscomment.getLinkUrl(),
			bbscomment.getExtraContents(),
			bbscomment.getViewCount(),
			bbscomment.getLikeCount(),
			bbscomment.getDislikeCount(),
			bbscomment.getReportCount(),
			bbscomment.getFileCount(),
			bbscomment.getCommentCount(),
			bbscomment.getRegDate(),
			bbscomment.getRLevel(),
			bbscomment.getRCommentSeq(),
			bbscomment.getRRegDate()
		});
	}

	public void deleteBbsComment(String bbs_comment_seq) {
		String query = "DELETE FROM T_NF_MISSION_COMMENT WHERE bbs_comment_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] { bbs_comment_seq });
	}

	public void updateBbsComment(BbsComment bbscomment) { 
		String query = "" + 
				"UPDATE T_NF_MISSION_COMMENT SET " +
				"	bbs_comment_seq  = ?, " +
				"	bbs_seq = ?, " +
				"	bbs_category = ?, " +
				"	bbs_header = ?, " +
				"	user_id = ?, " +
				"	bbs_title = ?, " +
				"	bbs_contents = ?, " +
				"	files = ?, " +
				"	link_url = ?, " +
				"	extra_contents = ?, " +
				"	view_count = ?, " +
				"	like_count = ?, " +
				"	dislike_count = ?, " +
				"	report_count = ?, " +
				"	file_count = ?, " +
				"	comment_count = ?, " +
				"	reg_date = ?, " +
				"	r_level = ?, " +
				"	r_comment_seq = ?, " +
				"	r_reg_date = ? " +
				"WHERE bbs_comment_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {
			bbscomment.getBbsCommentSeq(),
			bbscomment.getBbsSeq(),
			bbscomment.getBbsCategory(),
			bbscomment.getBbsHeader(),
			bbscomment.getUserId(),
			bbscomment.getBbsTitle(),
			bbscomment.getBbsContents(),
			bbscomment.getFiles(),
			bbscomment.getLinkUrl(),
			bbscomment.getExtraContents(),
			bbscomment.getViewCount(),
			bbscomment.getLikeCount(),
			bbscomment.getDislikeCount(),
			bbscomment.getReportCount(),
			bbscomment.getFileCount(),
			bbscomment.getCommentCount(),
			bbscomment.getRegDate(),
			bbscomment.getRLevel(),
			bbscomment.getRCommentSeq(),
			bbscomment.getRRegDate()
		});
	}

	public BbsComment getBbsComment(String bbs_comment_seq) {
		String query = "" + 
				"SELECT bbs_comment_seq , bbs_seq, bbs_category, bbs_header, user_id, bbs_title, bbs_contents, files, link_url, extra_contents, view_count, like_count, dislike_count, report_count, file_count, comment_count, reg_date, r_level, r_comment_seq, r_reg_date " +
				"FROM T_NF_MISSION_COMMENT " +
				"WHERE bbs_comment_seq = ? ";
		return (BbsComment)this.jdbcTemplate.queryForObject(query, new Object[] { bbs_comment_seq }, this.bbscommentMapper);
	}

	public List<BbsComment> getBbsCommentList(int page, int itemCountPerPage) {
		String query = "" +
				"SELECT TOP "+ itemCountPerPage +" bbs_comment_seq , bbs_seq, bbs_category, bbs_header, user_id, bbs_title, bbs_contents, files, link_url, extra_contents, view_count, like_count, dislike_count, report_count, file_count, comment_count, reg_date, r_level, r_comment_seq, r_reg_date " +
				"FROM T_NF_MISSION_COMMENT " +
				"WHERE bbs_comment_seq <= ( " +
				"	SELECT MIN(bbs_comment_seq) " +
				"	FROM ( " +
				"		SELECT TOP "+ ((page-1) * itemCountPerPage + 1) +" bbs_comment_seq " +
				"		FROM T_NF_MISSION_COMMENT " +
				"		ORDER BY bbs_comment_seq DESC " +
				"	) AS A) " +
				"ORDER BY bbs_comment_seq DESC";
		return (List<BbsComment>)this.jdbcTemplate.query(query, this.bbscommentMapper);
	}

}
