package kr.nomad.mars.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;


import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import kr.nomad.mars.dto.Bbs;

public class BbsDao {
	
	private JdbcTemplate jdbcTemplate;
	public void setDataSource(DataSource dataSource) {
	    this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	private RowMapper bbsMapper = new RowMapper() {
		public Bbs mapRow(ResultSet rs, int rowNum) throws SQLException {
			Bbs bbs = new Bbs();
			bbs.setBbsSeq(rs.getInt("bbs_seq"));
			bbs.setBbsCategory(rs.getString("bbs_category"));
			bbs.setBbsHeader(rs.getString("bbs_header"));
			bbs.setUserId(rs.getString("user_id"));
			bbs.setBbsTitle(rs.getString("bbs_title"));
			bbs.setBbsContents(rs.getString("bbs_contents"));
			bbs.setBbsContentsText(rs.getString("bbs_contents_text"));
			bbs.setFiles(rs.getString("files"));
			bbs.setLinkUrl(rs.getString("link_url"));
			bbs.setExtraContents(rs.getString("extra_contents"));
			bbs.setViewCount(rs.getInt("view_count"));
			bbs.setLikeCount(rs.getInt("like_count"));
			bbs.setDislikeCount(rs.getInt("dislike_count"));
			bbs.setReportCount(rs.getInt("report_count"));
			bbs.setFileCount(rs.getInt("file_count"));
			bbs.setCommentCount(rs.getInt("comment_count"));
			bbs.setBlindCount(rs.getInt("blind_count"));
			bbs.setRegDate(rs.getString("reg_date"));
			return bbs;
		}
	};
	/*
	 * 
	 *  v_nf_bbs
		int gender =0;
		String birthday = "";
		String userType = "";
		String userName = "";
	*/
	
	private RowMapper VbbsMapper = new RowMapper() {
		public Bbs mapRow(ResultSet rs, int rowNum) throws SQLException {
			Bbs bbs = new Bbs();
			bbs.setBbsSeq(rs.getInt("bbs_seq"));
			bbs.setBbsCategory(rs.getString("bbs_category"));
			bbs.setBbsHeader(rs.getString("bbs_header"));
			bbs.setUserId(rs.getString("user_id"));
			bbs.setBbsTitle(rs.getString("bbs_title"));
			bbs.setBbsContents(rs.getString("bbs_contents"));
			bbs.setBbsContentsText(rs.getString("bbs_contents_text"));
			bbs.setFiles(rs.getString("files"));
			bbs.setLinkUrl(rs.getString("link_url"));
			bbs.setExtraContents(rs.getString("extra_contents"));
			bbs.setViewCount(rs.getInt("view_count"));
			bbs.setLikeCount(rs.getInt("like_count"));
			bbs.setDislikeCount(rs.getInt("dislike_count"));
			bbs.setReportCount(rs.getInt("report_count"));
			bbs.setFileCount(rs.getInt("file_count"));
			bbs.setCommentCount(rs.getInt("comment_count"));
			bbs.setBlindCount(rs.getInt("blind_count"));
			bbs.setRegDate(rs.getString("reg_date"));
			bbs.setGender(rs.getInt("gender"));
			bbs.setBirthday(rs.getString("birthday"));
			bbs.setUserType(rs.getInt("user_type"));
			bbs.setUserName(rs.getString("user_name"));
			return bbs;
		}
	};

	public void addBbs(final Bbs bbs) {
		String query = "" +
				"INSERT INTO T_NF_BBS " +
				"	( bbs_category, bbs_header, user_id,"
				+ " bbs_title, bbs_contents, bbs_contents_text,"
				+ " files, link_url, extra_contents,"
				+ " view_count, like_count, dislike_count,"
				+ " report_count, file_count, comment_count,"
				+ " blind_count, reg_date) " +
				"VALUES " +
				"	( ?, ?, ?,"
				+ " ?, ?, ?,"
				+ " ?, ?, ?,"
				+ " ?, ?, ?,"
				+ " ?, ?, ?,"
				+ " ?, getDate()) ";
		this.jdbcTemplate.update(query, new Object[] {
			
			bbs.getBbsCategory(),
			bbs.getBbsHeader(),
			bbs.getUserId(),
			bbs.getBbsTitle(),
			bbs.getBbsContents(),
			bbs.getBbsContentsText(),
			bbs.getFiles(),
			bbs.getLinkUrl(),
			bbs.getExtraContents(),
			bbs.getViewCount(),
			bbs.getLikeCount(),
			bbs.getDislikeCount(),
			bbs.getReportCount(),
			bbs.getFileCount(),
			bbs.getCommentCount(),
			bbs.getBlindCount()
	
		});
	}

	public void deleteBbs(int bbs_seq) {
		String query = "DELETE FROM T_NF_BBS WHERE bbs_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] { bbs_seq });
	}

	public void updateBbs(Bbs bbs) { 
		String query = "" + 
				"UPDATE T_NF_BBS SET " +
			
				"	bbs_category = ?, " +
				"	bbs_header = ?, " +
				"	user_id = ?, " +
				"	bbs_title = ?, " +
				"	bbs_contents = ?, " +
				"	bbs_contents_text = ?, " +
				"	files = ?, " +
				"	link_url = ?, " +
				"	extra_contents = ?, " +
				"	view_count = ?, " +
				"	like_count = ?, " +
				"	dislike_count = ?, " +
				"	report_count = ?, " +
				"	file_count = ?, " +
				"	comment_count = ?, " +
				"	blind_count = ? " +
		
				"WHERE bbs_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {
		
			bbs.getBbsCategory(),
			bbs.getBbsHeader(),
			bbs.getUserId(),
			bbs.getBbsTitle(),
			bbs.getBbsContents(),
			bbs.getBbsContentsText(),
			bbs.getFiles(),
			bbs.getLinkUrl(),
			bbs.getExtraContents(),
			bbs.getViewCount(),
			bbs.getLikeCount(),
			bbs.getDislikeCount(),
			bbs.getReportCount(),
			bbs.getFileCount(),
			bbs.getCommentCount(),
			bbs.getBlindCount(),
		    bbs.getBbsSeq()
		});
	}

	public Bbs getBbs(int bbs_seq) {
		String query = "" + 
				"SELECT * " +
				"FROM V_NF_BBS " +
				"WHERE bbs_seq = ? ";
		return (Bbs)this.jdbcTemplate.queryForObject(query, new Object[] { bbs_seq }, this.VbbsMapper);
	}

	public List<Bbs> getBbsList(int page, int itemCountPerPage) {
		String query = "" 
				+ "	SELECT * FROM ( "
				+ "		SELECT "
				+ "			ROW_NUMBER() OVER(order by reg_date desc) as row_seq, "
				+ "			A.* "
				+ "		FROM V_NF_BBS AS A "
				+ "	) AS a WHERE row_seq BETWEEN (("+page+" - 1) * "+itemCountPerPage+") +1 AND "+page+" * "+itemCountPerPage+" ";
		return (List<Bbs>)this.jdbcTemplate.query(query, this.VbbsMapper);
	}
	
	public int getBbsCount() {
		String query = "" 
				+ "	SELECT count(*) FROM  "
				+ "		 V_NF_BBS ";
		return this.jdbcTemplate.queryForInt(query);
	}

}
